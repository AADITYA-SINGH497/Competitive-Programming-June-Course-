class Solution {
    
        public void dfs(char[][] grid, int row, int col, boolean[][] visited){
        if(row<0 || row>=grid.length || col<0 
           || col>=grid[0].length || grid[row][col] == '0' || visited[row][col])
            return;
        visited[row][col] = true;
            
        dfs(grid, row-1, col, visited);
        dfs(grid, row+1, col, visited);
        dfs(grid, row, col-1, visited);
        dfs(grid, row, col+1, visited);
    }
    
    public int numIslands(char[][] grid) {
        int rows = grid.length, cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];
        for(int i=0; i<rows; i++)
            Arrays.fill(visited[i], false);
        int count = 0;
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    dfs(grid, i, j, visited);
                    count++;
                }
            }
        }
        
        return count;
    }
}
