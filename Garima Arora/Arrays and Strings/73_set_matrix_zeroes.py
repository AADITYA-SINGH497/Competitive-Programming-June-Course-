# -*- coding: utf-8 -*-
"""73. Set Matrix Zeroes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_O2jTS98mmGwWxGZ5czYTxeeMQNr0xDn
"""

class Solution:
    def setZeroes(self, a: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        
        '''
        
        
        # Brute Force Approach 
        # Using O(mn) space: The initial approach is to start with creating another matrix to store the result and make the entire row and col zero of the element having 0 value and then reflecting the same in original matrix.
        # TC= O(m*n(m+n))
        # SC=O(m*n)
        
        m=len(a)  #Row
        n=len(a[0]) # Col
        b=[[1 for _ in range(n)] for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if a[i][j]==0:
                    for k in range(m):
                        b[k][j]=0
                    for k in range(n):
                        b[i][k]=0
        for i in range(m):
            for j in range(n):
                if b[i][j]==0:
                    a[i][j]=0
                    '''
        '''
        # Better Approach 
        # Using O(m+n) space: We just need a way to track if any row or any col has a zero, because then that means the entire row or col has to be zero. So, we can use an array to track the zeroes for the row and zeros for the col. Whenever we see a zero, just set that row or col to be True.
        # TC= O(m*n)+O(m*n)
        # SC=O(m+n)
        
        m=len(a)
        n=len(a[0])
        r=[1]*m
        c=[1]*n
        for i in range(m):
            for j in range(n):
                if a[i][j]==0:
                    r[i]=0
                    c[j]=0
        for i in range(m):
            for j in range(n):
                if r[i]==0 or c[j]==0:
                    a[i][j]=0
        
        '''
    
        # Optimal Solution
        
        
        # Using O(1) Space: Aproach to get constant space is to use first row and first col of the matrix as a tracker.
        # Instead of having a separate array to track the zeroes, we simply use the first row or col to track them and then go back to update the first row and col with zeroes after we're done replacing it.

#At each row or col, if you see a zero, then mark the first row or first col as zero with the current row and col.

#Then iterate through the array again to see where the first row and col were marked as zero and then set that row/col as 0.
#After doing that, you'll need to traverse through the first row and/or first col if there were any zeroes there to begin with and set everything to be equal to 0 in the first row and/or first col.


        m=len(a)
        n=len(a[0])
        r=False
        c=False
        for i in range(m):
            for j in range(n):
                if a[i][j]==0:
                    a[0][j]=a[i][0]=0
                    if i==0:
                        r=True
                    if j==0:
                        c=True
                    
        for i in range(1,m):
            for j in range(1,n):
                if a[0][j]==0 or a[i][0]==0:
                    a[i][j]=0
        if r:
            for j in range(n):
                a[0][j]=0
        if c:
            for i in range(m):
                a[i][0]=0